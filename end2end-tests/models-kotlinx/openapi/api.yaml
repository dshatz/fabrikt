openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths: {}
components:
  schemas:
    TransportationDevice:
      type: object
      required:
        - deviceType
        - make
        - model
      properties:
        deviceType:
          type: string
          enum:
            - bike
            - skateboard
            - rollerskates
            - Ho_ver-boaRD
        make:
          type: string
        model:
          type: string
          format: uuid
    Pet:
      type: object
      required:
        - id
        - name
        - dateOfBirth
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
        dateOfBirth:
          type: string
          format: date
        lastFedAt:
          type: string
          format: date-time
        earTagUuid:
          type: string
          format: uuid
        imageUrl:
          type: string
          format: uri
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    # Polymorphic type with type as discriminator
    Phone:
      oneOf:
        - $ref: "#/components/schemas/LandlinePhone"
        - $ref: "#/components/schemas/MobilePhone"
      discriminator:
        propertyName: type
        mapping:
          landline: '#/components/schemas/LandlinePhone'
          mobile: '#/components/schemas/MobilePhone'
    LandlinePhone:
      type: object
      required:
        - type
        - number
        - area_code
      properties:
        type:
          type: string
        number:
          type: string
        area_code:
          type: string
    MobilePhone:
      type: object
      required:
        - type
        - number
      properties:
        type:
          type: string
        number:
          type: string
    # Polymorphic type with moduleType as discriminator
    Module:
      oneOf:
        - $ref: "#/components/schemas/ModuleA"
        - $ref: "#/components/schemas/ModuleB"
      discriminator:
        propertyName: moduleType
        mapping:
          a: '#/components/schemas/ModuleA'
          b: '#/components/schemas/ModuleB'
    ModuleA:
      type: object
      required:
          - moduleType
      properties:
        moduleType:
          type: string
    ModuleB:
      type: object
      required:
        - moduleType
      properties:
        moduleType:
          type: string
    # Polymorphic type with enum as discriminator
    State:
      oneOf:
        - $ref: "#/components/schemas/StateA"
        - $ref: "#/components/schemas/StateB"
      discriminator:
        propertyName: status
        mapping:
          a: '#/components/schemas/StateA'
          b: '#/components/schemas/StateB'
    StateA:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    StateB:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    Status:
      type: string
      enum:
        - a
        - b
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Content:
      type: "object"
      required:
        - "id"
        - "attr_1"
        - "attr_2"
        - "attr_3"
        - "etag"
        - "model_type"
      properties:
        id:
          description: "The unique resource id"
          type: "string"
          readOnly: true
        first_attr:
          description: "The attribute 1"
          type: "string"
          format: "date-time"
          example: "2016-01-27T10:52:46.406Z"
          readOnly: true
        second_attr:
          description: "The attribute 2"
          type: "string"
          readOnly: true
        third_attr:
          type: "string"
          enum:
            - "enum_type_1"
            - "enum_type_2"
          description: "Enum types for attribute 3"
          example: "enum_type_2"
        etag:
          type: "string"
          description: "Etag value to be used in conjunction with If-Match headers for optimistic locking purposes"
          readOnly: true
        model_type:
          type: "string"
          description: "The model discrimination type"
          enum:
            - "first_model"
            - "second_model"
            - "third_model"
          example: "third_model"
      discriminator:
        propertyName: "model_type"
        mapping:
          first_model: "#/components/schemas/FirstModel"
          second_model: "#/components/schemas/SecondModel"
          third_model: "#/components/schemas/ThirdModel"

    FirstModel:
      allOf:
        - $ref: "#/components/schemas/Content"
        - type: "object"
          properties:
            extra_first_attr:
              description: "The attribute 1 for model 1"
              type: array
              items:
                type: "string"
                minItems: 1
                maxItems: 10
              readOnly: true
    SecondModel:
      allOf:
        - $ref: "#/components/schemas/Content"
        - type: "object"
          properties:
            extra_first_attr:
              description: "The attribute 1 for model 2"
              type: "string"
              readOnly: true
            extra_second_attr:
              description: "The attribute 2 for model 2"
              type: boolean
              readOnly: true

    ThirdModel:
      allOf:
        - $ref: "#/components/schemas/Content"
        - type: "object"
          properties:
            extra_first_attr:
              description: "The attribute 1 for model 3"
              type: "string"
              format: "date-time"
              example: "2016-01-27T10:52:46.406Z"
              readOnly: true
            extra_second_attr:
              description: "The attribute 2 for model 3"
              type: integer
              readOnly: true
